import mongoose from 'mongoose';
import { BCRYPT_SALT } from '../config';
require("dotenv").config();

const bcrypt = require("bcrypt");
const bcryptSalt = BCRYPT_SALT;

const Schema = mongoose.Schema;

export const recordCollectionFields = {
    "ID": String,
    "Date First Active": String,
    "Status": String,
    "PQM Status": String,
    "Assigned To": String,
    "Date Created": String,
    "GE Knowledge Date": String,
    "USA Become Aware Date": String,
    "Task ID": String,
    "Source Record ID": String,
    "Task Owner": String,
    "Date Task Created": String,
    "Task State": String,
    "Customer": String,
    "Customer Country": String,
    "Customers Issue Description(Full)": String,
    "FE's Issue Description(Full)": String,
    "Actions Taken / Repairs(Full)": String,
    "Repair Test / Inspection Data(Full)": String,
    "Source Service System": String,
    "Additional Information(Full)": String,
    "Hazardous or Potentially Haz?": String,
    "Potentially Reportable?": String,
    "RAC Reference DOC#": String,
    "Hazardous Situation": String,
    "RSL": String,
    "Regulatory Non-Conformance?": String,
    "Further Investigation/Actions?": String,
    "Investigation Reference Rationale(Full)": String,
    "Investigation Reference DOC#": String,
    "Author": String,
    "Modality": String,
    "Modality Segment": String,
    "Product Group": String,
    "Product Name": String,
    "Device Identification Number": String,
    "Service System Product ID Code": String,
    "Software Version": String,
    "Serial Lot Batch No.": String,
    "Model No.": String,
    "Unique Device Identifier": String,
    "SPCR Symptom Description": String,
    "SPCR Problem Description": String,
    "SPCR Root Cause Code": String,
    "SPCR  Resolution": String,
    "Investigation Code": String,
    "Subsystem Code": String,
    "Date Closed": String,
    "Date Task Submitted": String,
    "Assigned": Boolean,
    "Type": String,
    "COM Issue Summary": String,
    "COM Issue Summary Markdown": String,
    "CSO Issue Summary": String,
    "CSO Issue Summary Markdown": String,
    "COM Issue Description (Full)":String,
    "COM Issue Description (Full) Markdown":String,
    "CSO Issue Description (Full)":String,
    "CSO Issue Description (Full) Markdown":String,
    "Application_Feature": String,
    "Investigation Team": String,
    "Analysis Owner": String,
    "Priority": String,
    "Platform_Release": String,
    "Application_Release": String,
    "Family_Issue": String,
    "Care Area": String,
    "Modality": String,
    "Analysis Status": String,
    "PO Review": String,
    "Team Name":String,
    "Hazardous_category": String,
    "Hazard_ID": String,
    "Hazard_decision": String,
    "Next_Action": String,
    "Next Steps": String,
    "Next Action Action Required": String,
    "Alert Escalation": String,
    "Chu_priority": String,
    "Associated_to_CSO": String,
    "Analysis_stop_date": String,
    "SPR": String,
    "Program": String,
    "Workaround": String,
    "Confluence": String,
    "Search key": String,
    "Hazard_Last_Review_Date": String,
    "Hazard Raised By": String,
    "Hazard_assessment": String,
    "Transfer_Date": String,
    "Internal_History": String,
    "Internal_History_Markdown": String,
    "External_History": String,
    "External_History_Markdown": String,
    "History": String,
    "History_Markdown": String,
    "Last_Action_Date": { type: Date, default: Date.now },
    "COM_Age": String,
    "SPCR_Age": String,
    "Associated CSO History": String,
    "Reason Of Closure": String,
    "Transfer Date": Date,
    "Integration_mode": String,
    "marketing":String,
    //cso
    "Case Number": String,
    "Account Name": String,
    "Request Category": String,
    "Action Owner": String,
    "CSO Closure Date": String,
    "Account Name: Country Name": String,
    "Acct Global Region": String,
    "CSO Region": String,
    "Service Request Number": String,
    "Customer Temperature": String,
    "Last Updated": String,
    "Subject": String,
    "Description": String,
    "Complaint Number (PQM)": String,
    "Assigned To: Full Name": String,
    "Date/Time Opened": String,
    "Date/Time Closed": String,
    "Days Open": String,
    "Created By: Full Name": String,
    "IB Asset: IB Asset ID": String,
    "GE Contact Names Engaged Pre-Escalation": String,
    "System ID/Asset ID": String,
    "System Status": String,
    "System Type": String,
    "SW Version (software version)": String,
    "CSO PSI Description": String,
    "Product Description": String,
    "IB Asset: Serial Number": String,
    "Rationale": String,
    "Root Cause Description": String,
    "Resolution Notes": String,
    "Product Manager Disposition": String,
    "Enhancement Identifier": String,
    "Awaiting Product Enhancement": String,
    "Anticipated Enhancement Delivery Date": String,
    "Part #": String,
    "Account Name: Alternate Account Name": String,
    "Assigned To: Email": String,
    "Requestor Email": String,
    "CSO_Status": String,
    "Comments": String,
    "Last_COM_Import": Date,
    "Record Status": String,
    "More Release Information": String,
    "Complaint_Number": String,
    "CSO_Current_Action_Status": String,
    "CSO_Internal_Meeting": String,
    "CSO_Alert_Flag": String,
    "CSO Solution Type": String,
    "CSO Release Proposed": String,
    "Engineering Feedback": String,
    "IB Team Feedback": String,
    "Official Communication": String,
    "Analysis Stop Date": Date,
    "COM Analysis Status": String,
    "CSO Email Title": String,
    "CSO Account Name": String,
    "Tier 1": String,
    "Tier 2": String,
    "Tier 3": String,
    "Previous action": String,
    associated_complaints: [String]
};
const recordCollectionSchema = new Schema(recordCollectionFields);

const usersCollectionSchema = new Schema({
    firstName: {
        type: String,
        trim: true,
        required: true,
        unique: false,
    },
    lastName: {
        type: String,
        trim: true,
        required: true,
        unique: false,
    },
    email: {
        type: String,
        trim: true,
        unique: true,
        required: true,
    },
    sso: {
        type: String,
        trim: false,
        required: true,
        unique: true,
    },
    TeamName: {
      type: String,
      trim: false,
      required: false,
      unique: false,
  },
    meetings: [{
        meetingTitle: { type: String },
        RecordIDs: [String],
        Type: String,
        filterExpression: String,
        DateCreated: String,
        Registration_Format: String,
    }],
    ToDoList: [{
      items: [String], // Array of strings representing items in the list
  }],
    password: { type: String },

    AccessLevel: {
        type: String,
        trim: true,
        required: true,
        unique: false,
        enum: ['IB', 'Engineering', 'Marketing','AWOthers','External'],
    },
}, { timestamps: true });

usersCollectionSchema.pre("save", async function(next) {
    if (!this.isModified("password")) {
        return next();
    }
    const hash = await bcrypt.hash(this.password, Number(bcryptSalt));
    this.password = hash;
    next();
});

const sharedDataCollectionSchema = new Schema({
    "key": String,
    "value": Schema.Types.Mixed,
});

const secondaryCollectionSchema = new Schema({
    "priority": [
        'Potential safety?(On assessment)',
        'Potential Regulatory? (On assessment)',
        'Blocking issue',
        'Urgent',
        'Sensitive Site',
        'Not applicable',
        'Low Priority',
        'Red CSO',
        'Product Enhacement',
        '-',
        'Safety Confirmed',
        'Regulatory Confirmed',
    ],
    "Hazardous_category": [
        "10.100_Function Incorrect Data Output",
        "10.300_Function Function Loss Or Deterioration",
        "-",
        "23.100_Cybersecurity"
    ],
    "Hazard_decision": [
        "Yes",
        "No",
        "-"
    ],
    "Hazard_ID": [
        "number10.100.140_Orientation or annotation of images used to diagnose/monitor disease and facilitate treatment are incorrectly displayed or outputted",
        "10.300.100_Obvious image distortion or degradation producing unusable image",
        "-",
        "10.300.30_Information affecting temporary delays or patient comfort is unavailable or lost",
        "10.100.90_Measurements or measurement units affecting temporary delays or patient comfort are incorrectly displayed or outputted",
        "10.100.30_Information affecting temporary delays or patient comfort is incorrectly displayed or outputted",
        "10.300.50_Imaging data is unavailable or lost before diagnostic reading or review",
        "23.100.10_Unauthorized access, malware ingress, or other vulnerabilities adversely affecting intended system performance or data resulting in high clinical risk",
    ],
    "RSL": [],
});

const validSSOCollectionSchema = new Schema({
    sso: {
        type: String,
        trim: false,
        required: false,
        unique: true,
    },
    AccessLevel: {
      type: String,
      trim: true,
      required: true,
      unique: false,
      enum: ['IB', 'Engineering', 'Marketing','AWOthers','External'],
  },
  TeamName: {
    type: String,
    trim: false,
    required: false,
    unique: false,
},
});

const appData = new Schema({
  priority: [String],
  csoRegion: [String],
  analysisStatus: [String],
  temperature: [String],
  integrationMode: [String],
  sfdcStatus: [String],
  pqmStatus: [String],
  csoStatus: [String],
  csoActionStatus: [String],
  csoInternalMeeting: [String],
  csoSolutionType: [String],
  investigationTeam: [String],
  poReview: [String],
  applicationFeature: [String],
  platformRelease: [String],
  applicationRelease: [String],
  modality: [String],
  csoReleaseProposed: [String],
  analysisOwner: [String],
  hazardousCategory: [String],
  hazardId: [String],
  appFeature: [
    {
      ID: String,
      Name: String,
      Family: String,
      Care_Area: String,
      Modality: String,
    }
  ],
});

export const recordDocumentModel = mongoose.model('recordDocumentModel', recordCollectionSchema, 'recordtest');
export const usersDocumentModel = mongoose.model('usersDocumentModel', usersCollectionSchema, 'users');
export const sharedDataDocumentModel = mongoose.model('shared', sharedDataCollectionSchema, 'shared');
export const validSSODocumentModel = mongoose.model('validSSODocumentModel', validSSOCollectionSchema, 'validSSO');
export const appDataDocumentModel = mongoose.model('appDataDocumentModel', appData, 'appData');